if test "@cross_compiling@" = "yes"; then
cross_compiling=yes
host=@use_host@
host_alias=@use_host@
fi

LD="@LD@"
CC="@CCACHE@ @CC@"
CXX="@CCACHE@ @CXX@"
CPP="@CCACHE@ @CPP@"
AR="@AR@"
AS="@AS@"
NM="@NM@"
STRIP="@STRIP@"
RANLIB="@RANLIB@"
OBJDUMP="@OBJDUMP@"

if test "@platform_os@" = "darwin_embedded" ; then
  export AS="@prefix@/@tool_dir@/bin/gas-preprocessor.pl @CCACHE@ @CC@ -arch @use_cpu@"
  export CCAS="--tag CC @prefix@/@tool_dir@/bin/gas-preprocessor.pl @CCACHE@ @CC@ -arch @use_cpu@"
fi

CFLAGS="@platform_cflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include $CFLAGS"
LDFLAGS="-L@prefix@/@deps_dir@/lib @platform_ldflags@ $LDFLAGS"
CXXFLAGS="@platform_cxxflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include $CXXFLAGS"
CPPFLAGS="@platform_cflags@ @platform_includes@ -isystem @prefix@/@deps_dir@/include $CPPFLAGS"

export PKG_CONFIG=@prefix@/@tool_dir@/bin/pkg-config
export PKG_CONFIG_LIBDIR=@prefix@/@deps_dir@/lib/pkgconfig
export YASM=@prefix@/@tool_dir@/bin/yasm
export NASM=@prefix@/@tool_dir@/bin/nasm
LIBGCRYPT_CONFIG=@prefix@/@deps_dir@/bin/libgcrypt-config

PATH=@prefix@/@tool_dir@/bin:@use_toolchain@/usr/bin:@use_toolchain@/bin:$PATH
LD_LIBRARY_PATH=@prefix@/@tool_dir@/lib:$LD_LIBRARY_PATH

PYTHON_VERSION=3.8
PYTHON_LDFLAGS="-L@prefix@/@deps_dir@/lib -lpython${PYTHON_VERSION} -lc -ldl -lm -lexpat -lffi -lintl -lutil -lssl -lcrypto"
PYTHON_CPPFLAGS=-I@prefix@/@deps_dir@/include/python${PYTHON_VERSION}
PYTHON_SITE_PKG=@prefix@/@deps_dir@/lib/python${PYTHON_VERSION}/site-packages
PYTHON_NOVERSIONCHECK=no-check
NATIVE_ROOT=@prefix@/@tool_dir@

#libomxil-bellagio
ac_cv_func_malloc_0_nonnull=yes

#curl
ac_cv_file__dev_urandom=yes
ac_cv_lib_ssl_SSL_connect=yes

#gettext and libiconv
gl_cv_header_working_stdint_h=yes

#libcec
ac_cv_search_dlopen=-ldl

#libgcrypt
if test "${PACKAGE_NAME}" = "libgcrypt"; then
  ac_cv_path_GPG_ERROR_CONFIG=@prefix@/@deps_dir@/bin/gpg-error-config
  ac_cv_sys_symbol_underscore=no
  CFLAGS="$CFLAGS -std=gnu99"
fi

#python
ac_cv_func_gethostbyname_r=no
ac_cv_header_sys_un_h=yes
ac_cv_file__dev_ptmx=no
ac_cv_file__dev_ptc=no

#gnutls
gl_cv_func_gettimeofday_clobber=no

#wayland
if test "${PACKAGE_NAME}" = "wayland"; then
  # wayland insists on building tests which rely on assert, which cannot work with -DNDEBUG
  # Maybe it would be better not to define -DNDEBUG globally for release builds?
  export CFLAGS=`echo ${CFLAGS} | sed 's/-DNDEBUG=1//g'`
  export CPPFLAGS=`echo ${CPPFLAGS} | sed 's/-DNDEBUG=1//g'`
fi


if test "@platform_os@" = "android"; then
  ac_cv_func_srand=yes
  ac_cv_func_rand=yes

  #python: android doesn't have libutil
  PYTHON_LDFLAGS="-L@prefix@/@deps_dir@/lib -lpython${PYTHON_VERSION} -lc -ldl -lm -lexpat -lffi -lintl -lssl -lcrypto"

fi

if test "@platform_os@" = "darwin_embedded"; then
  # there is no clock_settime on iOS/tvOS as of latest version 13.X
  ac_cv_func_clock_settime=no

  # tweaks for flac
  if test "${ac_unique_file}" = "src/flac/main.c" ; then
    # compiler barfs if we use -O3/O2 for flac
    export CFLAGS=`echo ${CFLAGS} | sed 's/-O3/-Os/'`
    export CPPFLAGS=`echo ${CPPFLAGS} | sed 's/-O3/-Os/'`
  fi
fi

if test "@target_platform@" = "appletvos"; then
  ac_cv_func_sigaltstack=no
  ac_cv_func_vfork_works=no
  ac_cv_func_fork=no
fi

#Fix for older, broken android toolchains
if test "${PACKAGE_NAME}" = "FreeType" -a "@platform_os@" = "android"; then
  CFLAGS="$CFLAGS -std=gnu99"
fi

# These libs do not correctly export their symbols. Force them in case
# -fvisibility=hidden is set.
if test "${ac_unique_file}" = "src/flac/main.c" || \
   test "${ac_unique_file}" = "src/framing.c" || \
   test "${ac_unique_file}" = "src/libdvdcss.c" || \
   test "${PACKAGE_NAME}" = "libssh2" ; then
     CFLAGS="$CFLAGS -fvisibility=default"
fi
