

/*
 *  Copyright (C) 2005-2018 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

// ************************************************************************
// This file was generated by xbmc compile process. DO NOT EDIT!!
//  It was created by running the code generator on the spec file for
//  the module "xbmcaddon" on the template file PythonSwig.template.cpp
// ************************************************************************



#include <Python.h>
#include <string>
#include "CompileInfo.h"
#include "interfaces/python/LanguageHook.h"
#include "interfaces/python/swig.h"
#include "interfaces/python/PyContext.h"


#if defined(TARGET_WINDOWS)
#  include <windows.h>
#endif

#include "interfaces/legacy/Addon.h"
#include "interfaces/legacy/Settings.h"

using namespace XBMCAddon;
using namespace xbmcaddon;

#if defined(__GNUG__)
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif



namespace PythonBindings
{

  //=========================================================================
  // These variables will hold the Python Type information for XBMCAddon::xbmcaddon::Addon
  TypeInfo TyXBMCAddon_xbmcaddon_Addon_Type(typeid(XBMCAddon::xbmcaddon::Addon));
  //=========================================================================

  //=========================================================================
  // These variables will hold the Python Type information for XBMCAddon::xbmcaddon::Settings
  TypeInfo TyXBMCAddon_xbmcaddon_Settings_Type(typeid(XBMCAddon::xbmcaddon::Settings));
  //=========================================================================



  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_New (PyTypeObject* pytype  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "|s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::xbmcaddon::Addon * apiResult;
    try
    {

      XBMCAddon::SetLanguageHookGuard slhg(XBMCAddon::Python::PythonLanguageHook::GetIfExists(PyThreadState_Get()->interp).get());
      apiResult = new XBMCAddon::xbmcaddon::Addon(  id  );
      prepareForReturn(apiResult);
    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"new XBMCAddon::xbmcaddon::Addon\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"new XBMCAddon::xbmcaddon::Addon\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = makePythonInstance(apiResult,pytype,false);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getLocalizedString (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    int  id ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "i",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::String  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getLocalizedString","XBMCAddon::xbmcaddon::Addon"))-> getLocalizedString(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getLocalizedString\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getLocalizedString\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyUnicode_DecodeUTF8(apiResult.c_str(),apiResult.size(),"surrogateescape");


    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettings (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;
    Settings * apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSettings","XBMCAddon::xbmcaddon::Addon"))-> getSettings(  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSettings\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSettings\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = makePythonInstance(apiResult,true);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSetting (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::String  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSetting","XBMCAddon::xbmcaddon::Addon"))-> getSetting(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSetting\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSetting\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyUnicode_DecodeUTF8(apiResult.c_str(),apiResult.size(),"surrogateescape");


    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingBool (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSettingBool","XBMCAddon::xbmcaddon::Addon"))-> getSettingBool(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSettingBool\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSettingBool\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingInt (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    int  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSettingInt","XBMCAddon::xbmcaddon::Addon"))-> getSettingInt(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSettingInt\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSettingInt\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = Py_BuildValue("i", apiResult);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingNumber (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    double  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSettingNumber","XBMCAddon::xbmcaddon::Addon"))-> getSettingNumber(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSettingNumber\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSettingNumber\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyFloat_FromDouble(apiResult);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingString (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::String  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getSettingString","XBMCAddon::xbmcaddon::Addon"))-> getSettingString(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getSettingString\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getSettingString\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyUnicode_DecodeUTF8(apiResult.c_str(),apiResult.size(),"surrogateescape");


    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSetting (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    std::string  value ;
    PyObject* pyvalue = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalue
       ))
    {
      return NULL;
    }


    try
    {
      if (pyvalue) PyXBMCGetUnicodeString(value,pyvalue,false,"value","setSetting"); 

      ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"setSetting","XBMCAddon::xbmcaddon::Addon"))-> setSetting(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setSetting\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setSetting\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingBool (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    bool  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sb",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"setSettingBool","XBMCAddon::xbmcaddon::Addon"))-> setSettingBool(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setSettingBool\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setSettingBool\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingInt (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    int  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "si",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"setSettingInt","XBMCAddon::xbmcaddon::Addon"))-> setSettingInt(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setSettingInt\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setSettingInt\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingNumber (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    double  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sd",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"setSettingNumber","XBMCAddon::xbmcaddon::Addon"))-> setSettingNumber(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setSettingNumber\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setSettingNumber\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingString (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    std::string  value ;
    PyObject* pyvalue = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalue
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {
      if (pyvalue) PyXBMCGetUnicodeString(value,pyvalue,false,"value","setSettingString"); 

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"setSettingString","XBMCAddon::xbmcaddon::Addon"))-> setSettingString(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setSettingString\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setSettingString\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_openSettings (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    try
    {

      ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"openSettings","XBMCAddon::xbmcaddon::Addon"))-> openSettings(  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"openSettings\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"openSettings\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Addon_getAddonInfo (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::String  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"getAddonInfo","XBMCAddon::xbmcaddon::Addon"))-> getAddonInfo(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getAddonInfo\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getAddonInfo\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyUnicode_DecodeUTF8(apiResult.c_str(),apiResult.size(),"surrogateescape");


    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getBool (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    bool  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getBool","XBMCAddon::xbmcaddon::Settings"))-> getBool(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getBool\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getBool\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = apiResult ? Py_True : Py_False; Py_INCREF(result);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getInt (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    int  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getInt","XBMCAddon::xbmcaddon::Settings"))-> getInt(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getInt\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getInt\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = Py_BuildValue("i", apiResult);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getNumber (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    double  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getNumber","XBMCAddon::xbmcaddon::Settings"))-> getNumber(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getNumber\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getNumber\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyFloat_FromDouble(apiResult);

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getString (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    XBMCAddon::String  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getString","XBMCAddon::xbmcaddon::Settings"))-> getString(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getString\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getString\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    result = PyUnicode_DecodeUTF8(apiResult.c_str(),apiResult.size(),"surrogateescape");


    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getBoolList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    std::vector< bool  >  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getBoolList","XBMCAddon::xbmcaddon::Settings"))-> getBoolList(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getBoolList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getBoolList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    
      result = PyList_New(0);

      for (std::vector<bool >::iterator iter = apiResult.begin(); iter != apiResult.end(); ++iter)
      {
        PyObject* pyentry1;
        pyentry1 = (*iter) ? Py_True : Py_False; Py_INCREF(pyentry1);
        PyList_Append(result, pyentry1);
        Py_DECREF(pyentry1);
      }



    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getIntList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    std::vector< int  >  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getIntList","XBMCAddon::xbmcaddon::Settings"))-> getIntList(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getIntList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getIntList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    
      result = PyList_New(0);

      for (std::vector<int >::iterator iter = apiResult.begin(); iter != apiResult.end(); ++iter)
      {
        PyObject* pyentry1;
        pyentry1 = Py_BuildValue("i", (*iter));
        PyList_Append(result, pyentry1);
        Py_DECREF(pyentry1);
      }



    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getNumberList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    std::vector< double  >  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getNumberList","XBMCAddon::xbmcaddon::Settings"))-> getNumberList(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getNumberList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getNumberList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    
      result = PyList_New(0);

      for (std::vector<double >::iterator iter = apiResult.begin(); iter != apiResult.end(); ++iter)
      {
        PyObject* pyentry1;
        pyentry1 = PyFloat_FromDouble((*iter));
        PyList_Append(result, pyentry1);
        Py_DECREF(pyentry1);
      }



    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_getStringList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          NULL};

    char * id  = nullptr;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "s",
       const_cast<char**>(keywords),
         &id
       ))
    {
      return NULL;
    }

    std::vector< XBMCAddon::String  >  apiResult;
    try
    {

      apiResult = ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"getStringList","XBMCAddon::xbmcaddon::Settings"))-> getStringList(  id  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"getStringList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"getStringList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    
      result = PyList_New(0);

      for (std::vector<XBMCAddon::String >::iterator iter = apiResult.begin(); iter != apiResult.end(); ++iter)
      {
        PyObject* pyentry1;
        pyentry1 = PyUnicode_DecodeUTF8((*iter).c_str(),(*iter).size(),"surrogateescape");

        PyList_Append(result, pyentry1);
        Py_DECREF(pyentry1);
      }



    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setBool (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    bool  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sb",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }


    try
    {

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setBool","XBMCAddon::xbmcaddon::Settings"))-> setBool(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setBool\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setBool\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setInt (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    int  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "si",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }


    try
    {

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setInt","XBMCAddon::xbmcaddon::Settings"))-> setInt(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setInt\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setInt\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setNumber (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    double  value ;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sd",
       const_cast<char**>(keywords),
         &id,
         &value
       ))
    {
      return NULL;
    }


    try
    {

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setNumber","XBMCAddon::xbmcaddon::Settings"))-> setNumber(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setNumber\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setNumber\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setString (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "value",
          NULL};

    char * id  = nullptr;
    std::string  value ;
    PyObject* pyvalue = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalue
       ))
    {
      return NULL;
    }


    try
    {
      if (pyvalue) PyXBMCGetUnicodeString(value,pyvalue,false,"value","setString"); 

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setString","XBMCAddon::xbmcaddon::Settings"))-> setString(  id,  value  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setString\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setString\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setBoolList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "values",
          NULL};

    char * id  = nullptr;
    std::vector< bool  >  values ;
    PyObject* pyvalues = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalues
       ))
    {
      return NULL;
    }


    try
    {
      
    if (pyvalues)
    {
      bool isTuple = PyObject_TypeCheck(pyvalues,&PyTuple_Type);
      if (!isTuple && !PyObject_TypeCheck(pyvalues,&PyList_Type))
        throw WrongTypeException("The parameter \"values\" must be either a Tuple or a List.");

      
      PyObject *pyentry1 = NULL;
      Py_ssize_t vecSize = (isTuple ? PyTuple_Size(pyvalues) : PyList_Size(pyvalues));
      values.reserve(vecSize);
      for(Py_ssize_t i = 0; i < vecSize; i++)
      {
        pyentry1 = (isTuple ? PyTuple_GetItem(pyvalues, i) : PyList_GetItem(pyvalues, i));
        bool  entry1;
        entry1 = (PyLong_AsLong(pyentry1) == 0L ? false : true);
        values.push_back(entry1);
      }
    }
 

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setBoolList","XBMCAddon::xbmcaddon::Settings"))-> setBoolList(  id,  values  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setBoolList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setBoolList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setIntList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "values",
          NULL};

    char * id  = nullptr;
    std::vector< int  >  values ;
    PyObject* pyvalues = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalues
       ))
    {
      return NULL;
    }


    try
    {
      
    if (pyvalues)
    {
      bool isTuple = PyObject_TypeCheck(pyvalues,&PyTuple_Type);
      if (!isTuple && !PyObject_TypeCheck(pyvalues,&PyList_Type))
        throw WrongTypeException("The parameter \"values\" must be either a Tuple or a List.");

      
      PyObject *pyentry1 = NULL;
      Py_ssize_t vecSize = (isTuple ? PyTuple_Size(pyvalues) : PyList_Size(pyvalues));
      values.reserve(vecSize);
      for(Py_ssize_t i = 0; i < vecSize; i++)
      {
        pyentry1 = (isTuple ? PyTuple_GetItem(pyvalues, i) : PyList_GetItem(pyvalues, i));
        int  entry1;
        entry1 = (int)PyLong_AsLong(pyentry1);
        values.push_back(entry1);
      }
    }
 

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setIntList","XBMCAddon::xbmcaddon::Settings"))-> setIntList(  id,  values  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setIntList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setIntList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setNumberList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "values",
          NULL};

    char * id  = nullptr;
    std::vector< double  >  values ;
    PyObject* pyvalues = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalues
       ))
    {
      return NULL;
    }


    try
    {
      
    if (pyvalues)
    {
      bool isTuple = PyObject_TypeCheck(pyvalues,&PyTuple_Type);
      if (!isTuple && !PyObject_TypeCheck(pyvalues,&PyList_Type))
        throw WrongTypeException("The parameter \"values\" must be either a Tuple or a List.");

      
      PyObject *pyentry1 = NULL;
      Py_ssize_t vecSize = (isTuple ? PyTuple_Size(pyvalues) : PyList_Size(pyvalues));
      values.reserve(vecSize);
      for(Py_ssize_t i = 0; i < vecSize; i++)
      {
        pyentry1 = (isTuple ? PyTuple_GetItem(pyvalues, i) : PyList_GetItem(pyvalues, i));
        double  entry1;
        entry1 = PyFloat_AsDouble(pyentry1);
        values.push_back(entry1);
      }
    }
 

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setNumberList","XBMCAddon::xbmcaddon::Settings"))-> setNumberList(  id,  values  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setNumberList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setNumberList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static PyObject* xbmcaddon_XBMCAddon_xbmcaddon_Settings_setStringList (PyHolder* self  , PyObject *args, PyObject *kwds  )
  {
    XBMC_TRACE;

    static const char *keywords[] = {
          "id",
          "values",
          NULL};

    char * id  = nullptr;
    std::vector< XBMCAddon::String  >  values ;
    PyObject* pyvalues = NULL;
    if (!PyArg_ParseTupleAndKeywords(
       args,
       kwds,
       "sO",
       const_cast<char**>(keywords),
         &id,
         &pyvalues
       ))
    {
      return NULL;
    }


    try
    {
      
    if (pyvalues)
    {
      bool isTuple = PyObject_TypeCheck(pyvalues,&PyTuple_Type);
      if (!isTuple && !PyObject_TypeCheck(pyvalues,&PyList_Type))
        throw WrongTypeException("The parameter \"values\" must be either a Tuple or a List.");

      
      PyObject *pyentry1 = NULL;
      Py_ssize_t vecSize = (isTuple ? PyTuple_Size(pyvalues) : PyList_Size(pyvalues));
      values.reserve(vecSize);
      for(Py_ssize_t i = 0; i < vecSize; i++)
      {
        pyentry1 = (isTuple ? PyTuple_GetItem(pyvalues, i) : PyList_GetItem(pyvalues, i));
        std::string  entry1;
        if (pyentry1) PyXBMCGetUnicodeString(entry1,pyentry1,false,"entry1","setStringList");
        values.push_back(std::move(entry1));
      }
    }
 

      ((XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"setStringList","XBMCAddon::xbmcaddon::Settings"))-> setStringList(  id,  values  );

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
      return NULL; 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"setStringList\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"setStringList\""); 
      return NULL; 
    }

    PyObject* result = Py_None;

    // transform the result
    Py_INCREF(Py_None);
    result = Py_None;

    return result; 
  } 

  static void xbmcaddon_XBMCAddon_xbmcaddon_Addon_Dealloc (PyHolder* self  )
  {
    XBMC_TRACE;

    try
    {


      XBMCAddon::xbmcaddon::Addon* theObj = (XBMCAddon::xbmcaddon::Addon*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Addon_Type,"~XBMCAddon::xbmcaddon::Addon","XBMCAddon::xbmcaddon::Addon");
      cleanForDealloc(theObj);

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"XBMCAddon::xbmcaddon::Addon\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"XBMCAddon::xbmcaddon::Addon\""); 
    }

    (((PyObject*)(self))->ob_type)->tp_free((PyObject*)self);
    
  } 
  static void xbmcaddon_XBMCAddon_xbmcaddon_Settings_Dealloc (PyHolder* self  )
  {
    XBMC_TRACE;

    try
    {


      XBMCAddon::xbmcaddon::Settings* theObj = (XBMCAddon::xbmcaddon::Settings*)retrieveApiInstance((PyObject*)self,&TyXBMCAddon_xbmcaddon_Settings_Type,"~XBMCAddon::xbmcaddon::Settings","XBMCAddon::xbmcaddon::Settings");
      cleanForDealloc(theObj);

    }
    catch (const XBMCAddon::WrongTypeException& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_TypeError, e.GetExMessage()); 
    }
    catch (const XbmcCommons::Exception& e)
    {
      CLog::Log(LOGERROR,"EXCEPTION: {}",e.GetExMessage());
      PyErr_SetString(PyExc_RuntimeError, e.GetExMessage()); 
    }
    catch (...)
    {
      CLog::Log(LOGERROR,"EXCEPTION: Unknown exception thrown from the call \"XBMCAddon::xbmcaddon::Settings\"");
      PyErr_SetString(PyExc_RuntimeError, "Unknown exception thrown from the call \"XBMCAddon::xbmcaddon::Settings\""); 
    }

    (((PyObject*)(self))->ob_type)->tp_free((PyObject*)self);
    
  } 
  //=========================================================================
  // This section contains the initialization for the
  // Python extension for the Api class XBMCAddon::xbmcaddon::Addon
  //=========================================================================
  // All of the methods on this class
  static PyMethodDef XBMCAddon_xbmcaddon_Addon_methods[] = { 
    {"getLocalizedString", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getLocalizedString, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSettings", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettings, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSetting", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSetting, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSettingBool", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingBool, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSettingInt", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingInt, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSettingNumber", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingNumber, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getSettingString", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getSettingString, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setSetting", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSetting, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setSettingBool", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingBool, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setSettingInt", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingInt, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setSettingNumber", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingNumber, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setSettingString", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_setSettingString, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"openSettings", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_openSettings, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getAddonInfo", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Addon_getAddonInfo, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {NULL, NULL, 0, NULL}
  };



  // This method initializes the above mentioned Python Type structure
  static void initPyXBMCAddon_xbmcaddon_Addon_Type()
  {


    PyTypeObject& pythonType = TyXBMCAddon_xbmcaddon_Addon_Type.pythonType;
    pythonType.tp_name = "xbmcaddon.Addon";
    pythonType.tp_basicsize = sizeof(PyHolder);
    pythonType.tp_dealloc = (destructor)xbmcaddon_XBMCAddon_xbmcaddon_Addon_Dealloc; 

    pythonType.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE;

    pythonType.tp_doc = NULL;
    pythonType.tp_methods = XBMCAddon_xbmcaddon_Addon_methods; 

    pythonType.tp_base = NULL;
    pythonType.tp_new = xbmcaddon_XBMCAddon_xbmcaddon_Addon_New;
    pythonType.tp_init = dummy_tp_init;

    TyXBMCAddon_xbmcaddon_Addon_Type.swigType="p.XBMCAddon::xbmcaddon::Addon";
    registerAddonClassTypeInformation(&TyXBMCAddon_xbmcaddon_Addon_Type);

  }
  //=========================================================================

  //=========================================================================
  // This section contains the initialization for the
  // Python extension for the Api class XBMCAddon::xbmcaddon::Settings
  //=========================================================================
  // All of the methods on this class
  static PyMethodDef XBMCAddon_xbmcaddon_Settings_methods[] = { 
    {"getBool", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getBool, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getInt", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getInt, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getNumber", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getNumber, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getString", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getString, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getBoolList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getBoolList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getIntList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getIntList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getNumberList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getNumberList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"getStringList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_getStringList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setBool", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setBool, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setInt", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setInt, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setNumber", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setNumber, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setString", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setString, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setBoolList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setBoolList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setIntList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setIntList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setNumberList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setNumberList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {"setStringList", (PyCFunction)xbmcaddon_XBMCAddon_xbmcaddon_Settings_setStringList, METH_VARARGS|METH_KEYWORDS, NULL }, 
    {NULL, NULL, 0, NULL}
  };



  // This method initializes the above mentioned Python Type structure
  static void initPyXBMCAddon_xbmcaddon_Settings_Type()
  {


    PyTypeObject& pythonType = TyXBMCAddon_xbmcaddon_Settings_Type.pythonType;
    pythonType.tp_name = "xbmcaddon.Settings";
    pythonType.tp_basicsize = sizeof(PyHolder);
    pythonType.tp_dealloc = (destructor)xbmcaddon_XBMCAddon_xbmcaddon_Settings_Dealloc; 

    pythonType.tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE;

    pythonType.tp_doc = NULL;
    pythonType.tp_methods = XBMCAddon_xbmcaddon_Settings_methods; 

    pythonType.tp_base = NULL;
    pythonType.tp_new = NULL;
    pythonType.tp_init = dummy_tp_init;

    TyXBMCAddon_xbmcaddon_Settings_Type.swigType="p.XBMCAddon::xbmcaddon::Settings";
    registerAddonClassTypeInformation(&TyXBMCAddon_xbmcaddon_Settings_Type);

  }
  //=========================================================================


  static PyMethodDef xbmcaddon_methods[] = { 
    {NULL, NULL, 0, NULL}
  };

  // This is the call that will call all of the other initializes
  //  for all of the classes in this module
  static void initTypes()
  {
    static bool typesAlreadyInitialized = false;
    if (!typesAlreadyInitialized)
    {
      typesAlreadyInitialized = true;

      initPyXBMCAddon_xbmcaddon_Addon_Type();
      initPyXBMCAddon_xbmcaddon_Settings_Type();
      if (PyType_Ready(&(TyXBMCAddon_xbmcaddon_Addon_Type.pythonType)) < 0)
        return;
      if (PyType_Ready(&(TyXBMCAddon_xbmcaddon_Settings_Type.pythonType)) < 0)
        return;
    }
  }

  static struct PyModuleDef createModule
  {
      PyModuleDef_HEAD_INIT,
      "xbmcaddon",
      "",
      -1,
      xbmcaddon_methods,
      nullptr,
      nullptr,
      nullptr,
      nullptr,
  };

  PyObject *PyInit_Module_xbmcaddon()
  {
    initTypes();

    // init general xbmcaddon modules
    PyObject* module;


    Py_INCREF(&(TyXBMCAddon_xbmcaddon_Addon_Type.pythonType));
    Py_INCREF(&(TyXBMCAddon_xbmcaddon_Settings_Type.pythonType));

    module = PyModule_Create(&createModule);
    if (module == NULL) return NULL;


    PyModule_AddObject(module, "Addon", (PyObject*)(&(TyXBMCAddon_xbmcaddon_Addon_Type.pythonType)));
    PyModule_AddObject(module, "Settings", (PyObject*)(&(TyXBMCAddon_xbmcaddon_Settings_Type.pythonType)));

   // constants
   PyModule_AddStringConstant(module, "__author__", "Team Kodi <http://kodi.tv>");
   PyModule_AddStringConstant(module, "__date__", CCompileInfo::GetBuildDate().c_str());
   PyModule_AddStringConstant(module, "__version__", "3.0.1");
   PyModule_AddStringConstant(module, "__credits__", "Team Kodi");
   PyModule_AddStringConstant(module, "__platform__", "ALL");

   // need to handle constants
   // #define constants

  // constexpr constants

  return module;
  }

} // end PythonBindings namespace for python type definitions


