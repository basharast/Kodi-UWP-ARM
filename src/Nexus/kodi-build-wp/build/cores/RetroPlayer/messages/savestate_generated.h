// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SAVESTATE_KODI_RETRO_H_
#define FLATBUFFERS_GENERATED_SAVESTATE_KODI_RETRO_H_

#include "flatbuffers/flatbuffers.h"

namespace KODI {
namespace RETRO {

struct Savestate;
struct SavestateBuilder;

enum SaveType : uint8_t {
  SaveType_Unknown = 0,
  SaveType_Auto = 1,
  SaveType_Manual = 2,
  SaveType_MIN = SaveType_Unknown,
  SaveType_MAX = SaveType_Manual
};

inline const SaveType (&EnumValuesSaveType())[3] {
  static const SaveType values[] = {
    SaveType_Unknown,
    SaveType_Auto,
    SaveType_Manual
  };
  return values;
}

inline const char * const *EnumNamesSaveType() {
  static const char * const names[4] = {
    "Unknown",
    "Auto",
    "Manual",
    nullptr
  };
  return names;
}

inline const char *EnumNameSaveType(SaveType e) {
  if (flatbuffers::IsOutRange(e, SaveType_Unknown, SaveType_Manual)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSaveType()[index];
}

struct Savestate FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SavestateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_TYPE = 6,
    VT_SLOT = 8,
    VT_LABEL = 10,
    VT_CREATED = 12,
    VT_GAME_FILE_NAME = 14,
    VT_TIMESTAMP_FRAMES = 16,
    VT_TIMESTAMP_WALL_CLOCK_NS = 18,
    VT_EMULATOR_ADDON_ID = 20,
    VT_EMULATOR_VERSION = 22,
    VT_MEMORY_DATA = 24,
    VT_CAPTION = 26
  };
  uint8_t version() const {
    return GetField<uint8_t>(VT_VERSION, 0);
  }
  KODI::RETRO::SaveType type() const {
    return static_cast<KODI::RETRO::SaveType>(GetField<uint8_t>(VT_TYPE, 0));
  }
  uint8_t slot() const {
    return GetField<uint8_t>(VT_SLOT, 0);
  }
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const flatbuffers::String *created() const {
    return GetPointer<const flatbuffers::String *>(VT_CREATED);
  }
  const flatbuffers::String *game_file_name() const {
    return GetPointer<const flatbuffers::String *>(VT_GAME_FILE_NAME);
  }
  uint64_t timestamp_frames() const {
    return GetField<uint64_t>(VT_TIMESTAMP_FRAMES, 0);
  }
  uint64_t timestamp_wall_clock_ns() const {
    return GetField<uint64_t>(VT_TIMESTAMP_WALL_CLOCK_NS, 0);
  }
  const flatbuffers::String *emulator_addon_id() const {
    return GetPointer<const flatbuffers::String *>(VT_EMULATOR_ADDON_ID);
  }
  const flatbuffers::String *emulator_version() const {
    return GetPointer<const flatbuffers::String *>(VT_EMULATOR_VERSION);
  }
  const flatbuffers::Vector<uint8_t> *memory_data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MEMORY_DATA);
  }
  const flatbuffers::String *caption() const {
    return GetPointer<const flatbuffers::String *>(VT_CAPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           VerifyField<uint8_t>(verifier, VT_SLOT) &&
           VerifyOffset(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffset(verifier, VT_CREATED) &&
           verifier.VerifyString(created()) &&
           VerifyOffset(verifier, VT_GAME_FILE_NAME) &&
           verifier.VerifyString(game_file_name()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP_FRAMES) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP_WALL_CLOCK_NS) &&
           VerifyOffset(verifier, VT_EMULATOR_ADDON_ID) &&
           verifier.VerifyString(emulator_addon_id()) &&
           VerifyOffset(verifier, VT_EMULATOR_VERSION) &&
           verifier.VerifyString(emulator_version()) &&
           VerifyOffset(verifier, VT_MEMORY_DATA) &&
           verifier.VerifyVector(memory_data()) &&
           VerifyOffset(verifier, VT_CAPTION) &&
           verifier.VerifyString(caption()) &&
           verifier.EndTable();
  }
};

struct SavestateBuilder {
  typedef Savestate Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint8_t version) {
    fbb_.AddElement<uint8_t>(Savestate::VT_VERSION, version, 0);
  }
  void add_type(KODI::RETRO::SaveType type) {
    fbb_.AddElement<uint8_t>(Savestate::VT_TYPE, static_cast<uint8_t>(type), 0);
  }
  void add_slot(uint8_t slot) {
    fbb_.AddElement<uint8_t>(Savestate::VT_SLOT, slot, 0);
  }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(Savestate::VT_LABEL, label);
  }
  void add_created(flatbuffers::Offset<flatbuffers::String> created) {
    fbb_.AddOffset(Savestate::VT_CREATED, created);
  }
  void add_game_file_name(flatbuffers::Offset<flatbuffers::String> game_file_name) {
    fbb_.AddOffset(Savestate::VT_GAME_FILE_NAME, game_file_name);
  }
  void add_timestamp_frames(uint64_t timestamp_frames) {
    fbb_.AddElement<uint64_t>(Savestate::VT_TIMESTAMP_FRAMES, timestamp_frames, 0);
  }
  void add_timestamp_wall_clock_ns(uint64_t timestamp_wall_clock_ns) {
    fbb_.AddElement<uint64_t>(Savestate::VT_TIMESTAMP_WALL_CLOCK_NS, timestamp_wall_clock_ns, 0);
  }
  void add_emulator_addon_id(flatbuffers::Offset<flatbuffers::String> emulator_addon_id) {
    fbb_.AddOffset(Savestate::VT_EMULATOR_ADDON_ID, emulator_addon_id);
  }
  void add_emulator_version(flatbuffers::Offset<flatbuffers::String> emulator_version) {
    fbb_.AddOffset(Savestate::VT_EMULATOR_VERSION, emulator_version);
  }
  void add_memory_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> memory_data) {
    fbb_.AddOffset(Savestate::VT_MEMORY_DATA, memory_data);
  }
  void add_caption(flatbuffers::Offset<flatbuffers::String> caption) {
    fbb_.AddOffset(Savestate::VT_CAPTION, caption);
  }
  explicit SavestateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Savestate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Savestate>(end);
    return o;
  }
};

inline flatbuffers::Offset<Savestate> CreateSavestate(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t version = 0,
    KODI::RETRO::SaveType type = KODI::RETRO::SaveType_Unknown,
    uint8_t slot = 0,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    flatbuffers::Offset<flatbuffers::String> created = 0,
    flatbuffers::Offset<flatbuffers::String> game_file_name = 0,
    uint64_t timestamp_frames = 0,
    uint64_t timestamp_wall_clock_ns = 0,
    flatbuffers::Offset<flatbuffers::String> emulator_addon_id = 0,
    flatbuffers::Offset<flatbuffers::String> emulator_version = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> memory_data = 0,
    flatbuffers::Offset<flatbuffers::String> caption = 0) {
  SavestateBuilder builder_(_fbb);
  builder_.add_timestamp_wall_clock_ns(timestamp_wall_clock_ns);
  builder_.add_timestamp_frames(timestamp_frames);
  builder_.add_caption(caption);
  builder_.add_memory_data(memory_data);
  builder_.add_emulator_version(emulator_version);
  builder_.add_emulator_addon_id(emulator_addon_id);
  builder_.add_game_file_name(game_file_name);
  builder_.add_created(created);
  builder_.add_label(label);
  builder_.add_slot(slot);
  builder_.add_type(type);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Savestate> CreateSavestateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t version = 0,
    KODI::RETRO::SaveType type = KODI::RETRO::SaveType_Unknown,
    uint8_t slot = 0,
    const char *label = nullptr,
    const char *created = nullptr,
    const char *game_file_name = nullptr,
    uint64_t timestamp_frames = 0,
    uint64_t timestamp_wall_clock_ns = 0,
    const char *emulator_addon_id = nullptr,
    const char *emulator_version = nullptr,
    const std::vector<uint8_t> *memory_data = nullptr,
    const char *caption = nullptr) {
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto created__ = created ? _fbb.CreateString(created) : 0;
  auto game_file_name__ = game_file_name ? _fbb.CreateString(game_file_name) : 0;
  auto emulator_addon_id__ = emulator_addon_id ? _fbb.CreateString(emulator_addon_id) : 0;
  auto emulator_version__ = emulator_version ? _fbb.CreateString(emulator_version) : 0;
  auto memory_data__ = memory_data ? _fbb.CreateVector<uint8_t>(*memory_data) : 0;
  auto caption__ = caption ? _fbb.CreateString(caption) : 0;
  return KODI::RETRO::CreateSavestate(
      _fbb,
      version,
      type,
      slot,
      label__,
      created__,
      game_file_name__,
      timestamp_frames,
      timestamp_wall_clock_ns,
      emulator_addon_id__,
      emulator_version__,
      memory_data__,
      caption__);
}

inline const KODI::RETRO::Savestate *GetSavestate(const void *buf) {
  return flatbuffers::GetRoot<KODI::RETRO::Savestate>(buf);
}

inline const KODI::RETRO::Savestate *GetSizePrefixedSavestate(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<KODI::RETRO::Savestate>(buf);
}

inline const char *SavestateIdentifier() {
  return "SAV_";
}

inline bool SavestateBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SavestateIdentifier());
}

inline bool VerifySavestateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<KODI::RETRO::Savestate>(SavestateIdentifier());
}

inline bool VerifySizePrefixedSavestateBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<KODI::RETRO::Savestate>(SavestateIdentifier());
}

inline void FinishSavestateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KODI::RETRO::Savestate> root) {
  fbb.Finish(root, SavestateIdentifier());
}

inline void FinishSizePrefixedSavestateBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<KODI::RETRO::Savestate> root) {
  fbb.FinishSizePrefixed(root, SavestateIdentifier());
}

}  // namespace RETRO
}  // namespace KODI

#endif  // FLATBUFFERS_GENERATED_SAVESTATE_KODI_RETRO_H_
